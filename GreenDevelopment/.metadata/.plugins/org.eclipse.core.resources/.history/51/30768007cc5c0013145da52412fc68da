package com.nas.cuisine;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.Toast;

public class ManageSurveysActivity extends Activity{
	ProgressDialog dialog; 
	ConnectionDetector cd;
	AlertDialogManager alert = new AlertDialogManager();
	UserFunctions funcs = new UserFunctions();
	private DataBaseManager DatabaseHelper;
	private List<Meal> meals = new ArrayList<Meal>();
	private static String KEY_SUCCESS = "success";

	String id; 
	String fullname, address, phone, image_resource, organization;
	String personresp,projarea, ethanol,biogas,purwater, imgFilePath ;

	public void beforeSync(){
    	cd = new ConnectionDetector(getApplicationContext());
		if (!cd.isConnectingToInternet()) {
			alert.showAlertDialog(ManageSurveysActivity.this,"Internet Connection Error","Please connect to a working Internet connection", false);
			return;
		}
		new MyNewTask().execute();
    }

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		DatabaseHelper = DataBaseManager.instance();
		setContentView(R.layout.managesurveys);
		 
		updateRespondentsList();

        MealsArrayAdapter adapter = new MealsArrayAdapter(
                getApplicationContext(), R.layout.managelistview_item, meals);
	
        ListView lv = (ListView)findViewById(R.id.listView1);
        lv.setAdapter(adapter);
		lv.setClickable(true);
		lv.setTextFilterEnabled(true);
		lv.setFastScrollEnabled(true);
		lv.setOverScrollMode(AbsListView.OVER_SCROLL_IF_CONTENT_SCROLLS);
		
/*		lv.setOnItemClickListener(new OnItemClickListener(){

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,long arg3) {
				sendDataToServer(position);
			}
			
		});*/
		
		
		
		
		
		
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		
		switch (item.getItemId()){
		case R.id.submitmnitem:
			
			 for(int i=0; i<meals.size(); i++){
    	    	 Meal resp = meals.get(i);
        	     if(resp.isSelected()){
        	    	 Log.e("Value of responses", String.valueOf(meals));
        	    	 sendDataToServer(meals.indexOf(resp));
        	     }
    	    }
			return true;
		
		case R.id.deletemnitem:
			
			for(int i=0; i<meals.size(); i++){
   	    	 Meal resp = meals.get(i);
       	     if(resp.isSelected()){
       	    	 
       	    	DatabaseHelper.delete("pendingsurveys", "Id ="+resp.id);
			    File imgFile  = new File(imgFilePath);
			    imgFile.delete();
       	     }
			}
			Toast.makeText(getApplicationContext(), "You clicked delete", Toast.LENGTH_SHORT).show();
			return true;
		
		default:
			return super.onOptionsItemSelected(item);
		}		
	}

	
	@Override
	protected void onResume() {
		
		super.onResume();
	}

	private void updateRespondentsList() {
		Cursor cursor = DatabaseHelper.select("SELECT * FROM pendingsurveys");

        if (cursor == null){
            cursor.close();
        }

        while (cursor.moveToNext()){
        	String respid =  cursor.getString(0);
        	String respname =  cursor.getString(1);
        	String respaddress =  cursor.getString(2);
        	String respphone =  cursor.getString(3);
        	String respimppath =  cursor.getString(4);
        	String resporganization =  cursor.getString(5);
        	String resppersonresp =  cursor.getString(6);
        	String respprojarea =  cursor.getString(7);
        	String respethanol =  cursor.getString(8);
        	String respbiogas =  cursor.getString(9);
        	String resppurwater =  cursor.getString(10);
         	
        	// Construct Response object
            Meal resp = new Meal(respid, respname, respaddress, respphone, respimppath, resporganization,  
            		resppersonresp, respprojarea,  respethanol, respbiogas, resppurwater, false);
            meals.add(resp);
       }

        cursor.close();
	}
	
 	public void sendDataToServer(int position){
 		//id = responses.get(position).id;
		fullname = meals.get(position).name;
		address=  meals.get(position).address;
		phone = meals.get(position).phone;
		//get the field image and encode it in readiness for sending
		imgFilePath = meals.get(position).resourceFilePathId;
	    File imgFile  = new File(imgFilePath);
		if(imgFile.exists()){
    		Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
    		ByteArrayOutputStream stream = new ByteArrayOutputStream();
        	myBitmap.compress(Bitmap.CompressFormat.PNG, 90, stream);
        	byte [] byte_arr = stream.toByteArray();    	
        	image_resource = Base64.encodeBytes(byte_arr);
    	}
		
		organization =meals.get(position).organization;
		personresp = meals.get(position).person;
		projarea =meals.get(position).projarea;
		ethanol = meals.get(position).ethanol;
		biogas =meals.get(position).biogas;
		purwater = meals.get(position).purwater;

		beforeSync();
		
	} 

    private class MyNewTask extends AsyncTask<String, String, String>{
    	String indicator = null;
    	
    	@Override
        protected void onPreExecute(){
			dialog = new ProgressDialog(ManageSurveysActivity.this);
			dialog.setIndeterminate(true);
			dialog.setTitle("Submiting Response");
			dialog.setMessage("Processing...");
			dialog.setCancelable(true);
			dialog.show();
		}

		@Override
		protected String doInBackground(String... params) {

			JSONObject json = funcs.addResponse(fullname, address, phone, image_resource, organization,
					personresp,projarea,ethanol,biogas,purwater);
			
			if(json != null){
				try {
					indicator = json.getString(KEY_SUCCESS);	
				}
				catch (JSONException e) {
					e.printStackTrace();
				}
			}
			else{
            	dialog.dismiss();            	
            }			
			return indicator;
		}
    	
		@Override
        protected void onPostExecute(String flag){
			super.onPostExecute(flag); 
			dialog.dismiss();
			
			try{
				int indicator = Integer.parseInt(flag);	
				if(indicator == 1){
					
					DatabaseHelper.delete("pendingsurveys", "Id ="+id);
				    File imgFile  = new File(imgFilePath);
				    imgFile.delete();

					Toast.makeText(getApplicationContext(), "Response Recorded in the cloud", Toast.LENGTH_LONG).show();
					Intent i = new Intent(getApplicationContext(), HomeActivity.class);
					startActivity(i);
					//finish();
				}
				else{
					Toast.makeText(getApplicationContext(), "Cannot record response", Toast.LENGTH_LONG).show();
				}
			}
			catch(Exception e){
				serverError();
			}
		}
    }
    
    public void serverError(){
    	alert.showAlertDialog(ManageSurveysActivity.this,"Network Error","Cannot establish a connection to the server, please check the network", false);
		return;
    }
    

}
